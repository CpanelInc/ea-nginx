#!/usr/local/cpanel/3rdparty/bin/perl
# cpanel - ea-nginx                                Copyright 2020 cPanel, L.L.C.
#                                                           All rights Reserved.
# copyright@cpanel.net                                         http://cpanel.net
# This code is subject to the cPanel license. Unauthorized copying is prohibited

use strict;
use warnings;

package scripts::ea_nginx::logrotate;

exit( run(@ARGV) ? 0 : 1 ) if !caller;

sub run {
    my ($rotated_file) = @_;

    _load_logrotate_class();    # will go away once we do split this out per the TODO comment (ZC-6949) in the function

    # ZC-6912: should we allow globs (i.e. under `sharedscripts`)? it’d be a mix of users to setuid/spork etc
    my $file = Cpanel::Logrotate::File->new(
        path              => $rotated_file,
        protocol          => "http",
        server            => "nginx",
        process_stats_log => \&nginx_process_stats_log,
    );

    return $file->process_rotated_file();
}

###############
#### helpers ##
###############

sub nginx_process_stats_log {
    my ($self) = @_;

    if ( $self->piped_logging_enabled ) {

        # piped logging w/ nginx:
        #  1. has -ssl_log file (splitlogs)
        #  2. does not add the extra initial port-related column
        return $self->std_process_stats_log;
    }
    else {
        # not-piped logging w/ nginx (because SSL and non-SSL are done int he same server block)
        #   1. does not do -ssl_log
        #   2. Adds an extra initial port-related column
        # so when we get a non-ssl file we want to
        #   1. create -ssl_log from the first :443 column
        #   2. remove the :80 column from the non-SSL file
        if ( !$self->is_ssl ) {

            my $ssl_log = $self->path;
            if ( $ssl_log !~ s/(\.[0-9]+)$/-ssl_log$1/ ) {
                $ssl_log .= "-ssl_log";
            }

            # create $ssl_log based on first column of $self->path
            # remove frist column from $self->path if its :443
            require Path::Tiny;
            my $ssl_fh = Path::Tiny::path($ssl_log)->openw;
            Path::Tiny::path( $self->path )->edit_lines(
                sub {
                    if ( $_ =~ s/^\S+:443\s+// ) {
                        print {$ssl_fh} "$_";    # add the modified line to SSL log
                        $_ = "";                 # remove it from non-SSL log
                    }
                    else {
                        $_ =~ s/^\S+:80\s+//     # remove extra port-related column
                    }
                }
            );
            close $ssl_fh;

            my $ssl = Cpanel::Logrotate::File->new(
                path     => $ssl_log,
                protocol => scalar( $self->protocol ),
                server   => scalar( $self->server ),
            );
            $ssl->std_process_stats_log;
        }

        return $self->std_process_stats_log;
    }

    return;
}

sub _load_logrotate_class {

    #### TODO: ZC-6949 break this out for re-useability (w/ proper unit tests and POD) ##
    package Cpanel::Logrotate::File;

    use strict;
    use warnings;
    use Try::Tiny;
    use Moo;

    has process_bytes_log => (
        is  => "rw",
        isa => sub { die "must be a coderef" unless ref( $_[0] ) eq 'CODE' },
    );

    has process_stats_log => (
        is  => "rw",
        isa => sub { die "must be a coderef" unless ref( $_[0] ) eq 'CODE' },
    );

    has path => (
        is       => "ro",
        required => 1,
        isa      => sub {
            my ($rotated_file) = @_;

            die "No file given\n" if !$rotated_file;    # undef, "", and 0 are all invalid paths here

            # * is not valid in log file names since it has meaning to logrotate
            die "Pattern given instead of single file (logrotate’s `sharedscripts` enabled?)\n" if index( $rotated_file => '*' ) != -1;

            if ( substr( $rotated_file, -2, 2 ) ne ".1" ) {
                warn "Given file does not end in .1 (i.e. it is not the most recently rotated file)\n";
            }

            return 1;
        },
    );

    has piped_logging_enabled => (
        is      => "ro",
        lazy    => 1,
        default => sub {
            require Whostmgr::TweakSettings;
            return Whostmgr::TweakSettings::get_value( Main => "enable_piped_logs" );
        },
    );

    has protocol => (
        is       => "ro",
        required => 1,
        isa      => sub { die "can only contain [a-zA-Z0-9_]\n" unless $_[0] =~ m/\A[a-zA-Z0-9_]+\z/; },
    );

    has server => (
        is       => "ro",
        required => 1,
        isa      => sub { die "can only contain [a-zA-Z0-9_]\n" unless $_[0] =~ m/\A[a-zA-Z0-9_]+\z/; },
    );

    has domain => (
        is      => "ro",
        lazy    => 1,
        default => sub {
            my ($self) = @_;

            my $domain = $self->path;
            $domain =~ s{.*/}{};
            $domain =~ s/(?:-\w+_log)?(?:\.[0-9]+)?$//;

            die "Could not get domain from “" . $self->path . "”\n" if !$domain;
            return $domain;
        },
    );

    has user => (
        is      => "ro",
        lazy    => 1,
        default => sub {
            my ($self) = @_;

            my $domain = $self->domain;

            require Cpanel::AcctUtils::DomainOwner::Tiny;
            my $user = Cpanel::AcctUtils::DomainOwner::Tiny::getdomainowner( $domain, { default => undef } );

            die "Could not determine owner of “$domain”\n" if !$user;
            return $user;
        },
    );

    has logger => (
        is      => "rw",
        lazy    => 1,
        default => sub {
            require Cpanel::Logger::Persistent;
            return Cpanel::Logger::Persistent->new( { alternate_logfile => '/usr/local/cpanel/logs/logrotate' } );
        },
    );

    has stats_apps_conf => (
        is      => "ro",
        lazy    => 1,
        default => sub {
            my ($self) = @_;
            my $user = $self->user;

            # TODO: cache me to /var/cpanel/cache/userstatsconfig/$user (in ZC-6949 perhaps?)

            # A simpler/saner(-ish) version of Cpanel::Logd::get_userLogConfig()
            my %apps;

            require Cpanel::Config::LoadCpUserFile;
            require Cpanel::Config::LoadConfig;
            require Cpanel::Config::LoadCpConf;
            my $cpuser = Cpanel::Config::LoadCpUserFile::loadcpuserfile($user);
            my $cpconf = {

                # partially from libexec/cpanellogd’s loadcpconfWithDefaults()
                # defaults
                skipanalog   => 0,
                skipwebalize => 0,
                skipawstats  => 1,

                # actual settings
                Cpanel::Config::LoadCpConf::loadcpconf()
            };
            my $stconf = Cpanel::Config::LoadConfig::loadConfig('/etc/stats.conf');

            my @stat_apps = $cpuser->{STATGENS} ? map { lc } split( /,/, $cpuser->{STATGENS} ) : qw(webalizer awstats analog);

            for my $app (@stat_apps) {
                $apps{$app} = $cpconf->{"skip$app"} ? 0 : 1;
            }

            if ( $stconf->{DEFAULTGENS} ) {
                for my $defapp ( map { lc } split( /,/, $stconf->{DEFAULTGENS} ) ) {
                    $apps{$defapp}++;
                }
            }

            if ( defined $stconf->{VALIDUSERS} && defined $stconf->{ALLOWALL} && lc( $stconf->{ALLOWALL} ) ne 'yes' ) {
                my %validusers;
                @validusers{ split( /,/, $stconf->{VALIDUSERS} ) } = ();
                return \%apps if !exists $validusers{ $self->user };
            }

            require Cpanel::PwCache;
            my $homedir = Cpanel::PwCache::gethomedir($user);
            if ( -e "$homedir/tmp/stats.conf" ) {
                my $u_conf_hr = Cpanel::Config::LoadConfig::loadConfig("$homedir/tmp/stats.conf") || {};

                foreach my $key ( sort keys %{$u_conf_hr} ) {
                    my ( $app, $dom ) = split( /-/, $key, 2 );
                    $apps{$app}{$dom}++ if lc $u_conf_hr->{$key} eq 'yes';
                    $apps{$app}{"www.$dom"}++ if $apps{$app}{$dom};
                }
            }

            return \%apps;
        },
    );

    sub is_bytes {
        my ($self) = @_;
        return $self->path =~ m/-bytes_log(?:\.[0-9]+)?$/;
    }

    sub is_ssl {
        my ($self) = @_;
        return $self->path =~ m/-ssl_log(?:\.[0-9]+)?$/;
    }

    sub process_rotated_file {
        my ($self) = @_;

        die "log processing must be started as root\n" if $< != 0;
        if ( $self->is_bytes ) {
            return $self->process_bytes_log ? $self->process_bytes_log->($self) : $self->std_process_bytes_log;
        }
        else {
            return $self->process_stats_log ? $self->process_stats_log->($self) : $self->std_process_stats_log;
        }

        return 1;
    }

    sub std_process_stats_log {
        my ($self) = @_;
        my $log = $self->path;

        $self->make_user_readable;
        my $stats_apps_conf = $self->stats_apps_conf;

        require Cpanel::Locale;
        require Cpanel::Logd;
        require Cpanel::PwCache;
        require Cpanel::SafeDir::MK;
        require Cpanel::Config::LoadCpConf;
        require Cpanel::Config::userdata::Load;
        require Cpanel::AccessIds::ReducedPrivileges;    # is in at least 76
        return Cpanel::AccessIds::ReducedPrivileges::call_as_user(
            sub {
                my $user           = $self->user;
                my $domain         = $self->domain;
                my $domains        = Cpanel::Config::userdata::Load::load_userdata_main($user);
                my $locale         = Cpanel::Locale->get_handle();
                my $logdir         = $self->is_ssl ? '/ssl' : '';
                my $homedir        = Cpanel::PwCache::gethomedir($user);
                my $domain_is_main = exists $domains->{main_domain} && $domains->{main_domain} eq $domain ? 1 : 0;

                # This is why nobody likes you cpanellogd:
                no warnings "redefine", "once";

                package Cpanel::Logd::StatsLog { }
                my $main_statslog = $self->logger;
                local @Cpanel::Logger::Persistent::ISA = ( "Cpanel::Logd::StatsLog", @Cpanel::Logger::Persistent::ISA );
                local $Cpanel::Logd::stats_log_obj     = $main_statslog;
                local *Cpanel::Logger::Persistent::log = sub { shift; shift; $main_statslog->info(@_) };
                local *main::StatsLog                  = sub { shift; $main_statslog->info(@_) };
                local %main::CPCONF                    = Cpanel::Config::LoadCpConf::loadcpconf();

                use warnings "redefine", "once";

                for my $stats_app (qw(webalizer analog awstats)) {
                    next if !$stats_apps_conf->{$stats_app};
                    next if ref( $stats_apps_conf->{$stats_app} ) eq 'HASH' && !exists $stats_apps_conf->{$stats_app}{$domain};    # www. and non-www. is in config hash

                    $self->logger->info("[stats] [$stats_app] User: $user - FQDN: $domain (file: $log)");

                    try {
                        my $meth = "_run_$stats_app";
                        $self->$meth(
                            access_log     => $log,
                            domain         => $domain,
                            locale         => $locale,
                            logdir         => $logdir,
                            domain_is_main => $domain_is_main,
                            homedir        => $homedir,
                            domains        => $domains,
                        );
                    }
                    catch {
                        $self->logger->info("[stats] [$stats_app] $log failed\n$_");
                    }
                    finally {
                        $self->logger->info("[stats] [$stats_app] $log processed") if !@_;    # if there was no error caught
                    };
                }
            },
            $self->user
        );
    }

    sub make_user_readable {
        my ($self) = @_;
        my $log = $self->path;

        # best effort to ensure user can read $log
        my $gid = getgrnam( $self->user );
        chmod 0640, $log;
        chown 0, $gid, $log;

        return 1;
    }

    sub _run_webalizer {
        my ( $self, %args ) = @_;

        my $applang = $args{locale}->cpanel_get_3rdparty_lang('webalizer') || 'en';

        my $outputdir =
          !$args{logdir} && $args{domain_is_main}
          ? "$args{homedir}/tmp/webalizer"
          : "$args{homedir}/tmp/webalizer$args{logdir}/$args{domain}";
        Cpanel::SafeDir::MK::safemkdir( $outputdir => 0700 );

        return Cpanel::Logd::_webalizerGo( $applang, $outputdir, $args{access_log}, $args{domain} );    # last arg is “log name”
    }

    sub _run_analog {
        my ( $self, %args ) = @_;

        my $applang = $args{locale}->cpanel_get_3rdparty_lang('analog') || 'en';

        my $outputdir =
          !$args{logdir} && $args{domain_is_main}
          ? "$args{homedir}/tmp/analog"
          : "$args{homedir}/tmp/analog$args{logdir}/$args{domain}";
        Cpanel::SafeDir::MK::safemkdir( $outputdir => 0700 );

        return Cpanel::Logd::_analogGo( $applang, $outputdir, $args{access_log}, $args{domain} );    # last arg is “log name”
    }

    sub _run_awstats {
        my ( $self, %args ) = @_;

        my $outputdir = "$args{homedir}/tmp/awstats$args{logdir}";
        Cpanel::SafeDir::MK::safemkdir( $outputdir => 0700 );

        my $domain_list = [
            @{ $args{domains}{parked_domains} },
            @{ $args{domains}{sub_domains} },
            keys %{ $args{domains}{addon_domains} },
        ];

        local $ENV{AWSTATS_SSL_DIR} = $self->is_ssl ? 1 : 0;    # AWSTATS_SSL_DIR is used internally by awstats.pl
        return Cpanel::Logd::_awstatsGo( $outputdir, $args{access_log}, $args{domain}, $args{domains}{main_domain}, $domain_list );
    }

    sub std_process_bytes_log {
        my ($self) = @_;

        my $user      = $self->user;
        my $domain    = $self->domain;
        my $bytes_log = $self->path;

        require Cpanel::BandwidthDB;
        my $bw_db = Cpanel::BandwidthDB::get_writer($user);

        $self->logger->info("[bandwidth] User: $user - FQDN: $domain (file: $bytes_log)");

        require Cpanel::Bandwidth::BytesLogs;
        Cpanel::Bandwidth::BytesLogs::parse( $self->protocol . "/$domain", $bytes_log, ( 1024 * 1024 * 1024 * 9 ), $bw_db );
        $self->logger->info("[bandwidth] $bytes_log processed");

        $bw_db->write();
        $self->logger->info("[bandwidth] $bytes_log written");

        $self->bw_try_cache( bw_db => $bw_db );

        return 1;
    }

    sub bw_try_cache {
        my ( $self, %args ) = @_;
        $args{now} //= time;
        my $bw_db = $args{bw_db};

        require Cpanel::BandwidthDB::RootCache;
        local $@;
        my $root_bw_cache = eval { Cpanel::BandwidthDB::RootCache->new_without_rebuild() };    # best effort, its ok if this fails

        return if !$root_bw_cache;                                                             # just in case, again, just a best effort

        my $user   = $self->user;
        my $domain = $self->domain;

        my ( $thismonth, $thisyear ) = ( localtime( $args{now} ) )[ 4, 5 ];
        $thismonth++;
        $thisyear += 1900;

        my $protocol = $self->protocol;
        my $total_ar = $bw_db->get_bytes_totals_as_array(
            start     => "$thisyear-$thismonth",
            end       => "$thisyear-$thismonth",
            protocols => [$protocol],
            domains   => [$domain],
            grouping  => [],
        );

        my $total_num = $total_ar->[0][0] || 0;

        $self->logger->info( "[bandwidth] User: $user - FQDN: $domain (total bytes from " . $self->server . " `$protocol` $thisyear-$thismonth: $total_num)" );

        my $user_id   = $root_bw_cache->get_or_create_id_for_user($user);
        my $domain_id = $root_bw_cache->get_or_create_id_for_domain($domain);
        local $@;
        eval {
            $root_bw_cache->set_user_domain_year_month_bytes(
                $user_id,
                $domain_id,
                $thisyear,
                $thismonth,
                $total_num,
            );
        };
        warn $@ if $@;

        return;
    }
}

1;
